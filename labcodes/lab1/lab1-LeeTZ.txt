
=====================================================================================================
---------------------------------操作系统：lab1实验报告----------------------------------------------
-----------------------------------------------------------------------------------------------------
--------------------------------------------------------------清华大学计算机系 计14班	-------------
-----------------------------------------------------------------李铁峥 2011011268-------------------
--------------------------------------------------------------litiezheng513@gmail.com----------------
=====================================================================================================


【练习1】理解通过 make 生成执行文件的过程。
	1. 操作系统镜像文件 ucore.img 是如何一步一步生成的?(需要比较详细地解释 Makefile 中每一条相关命令和命令参数的含义,以及说明命令导致的结果)
	
	操作步骤：
		执行 make dist-clean 后再执行 make "V=" >make.log
	
	生成过程分析：
		
		完整阅读Makefile文件，鉴于已带有注释，不再对于其定义变量，环境检查等做说明。主要针对其日志文件解释其行为。
		
		(1) 首先编译各个.c文件生成.o。
				gcc各个参数的含义如下：
					-fno-builtin          意为不接受不是两个下划线开头的内建函数(built-in function)。
					-Wall 	              打开所有警告开关。
					-ggdb						      调试选项，比-g生成的调试信息更为丰富
					-gstabs               打开Stab调试信息（符号表）
					-nostdinc             不在标准系统目录中搜索头文件,只在-I指定的目录中搜索
					-fno-stack-protector  禁用堆栈保护
					
			+ cc kern/init/init.c
			gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o
			+ cc kern/libs/readline.c
			gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/readline.c -o obj/kern/libs/readline.o
			+ cc kern/libs/stdio.c
			gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/stdio.c -o obj/kern/libs/stdio.o
			+ cc kern/debug/kdebug.c
			gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o
			+ cc kern/debug/kmonitor.c
			gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kmonitor.c -o obj/kern/debug/kmonitor.o
			+ cc kern/debug/panic.c
			gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/panic.c -o obj/kern/debug/panic.o
			+ cc kern/driver/clock.c
			gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/clock.c -o obj/kern/driver/clock.o
			+ cc kern/driver/console.c
			gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/console.c -o obj/kern/driver/console.o
			+ cc kern/driver/intr.c
			gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/intr.c -o obj/kern/driver/intr.o
			+ cc kern/driver/picirq.c
			gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/picirq.c -o obj/kern/driver/picirq.o
			+ cc kern/trap/trap.c
			gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trap.c -o obj/kern/trap/trap.o
			+ cc kern/trap/trapentry.S
			gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trapentry.S -o obj/kern/trap/trapentry.o
			+ cc kern/trap/vectors.S
			gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/vectors.S -o obj/kern/trap/vectors.o
			+ cc kern/mm/pmm.c
			gcc -Ikern/mm/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/mm/pmm.c -o obj/kern/mm/pmm.o
			+ cc libs/printfmt.c
			gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/printfmt.c -o obj/libs/printfmt.o
			+ cc libs/string.c
			gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/string.c -o obj/libs/string.o
			+ ld bin/kernel
			
		(2) 链接各.o生成bin/kernel
				ld          GNU连接器
				-m          设置编译方式为elf_i386
				-nostdlib   仅搜索那些在命令行上显式指定的库路径. 在连接脚本中(包含在命令行上指定的连接脚本)指定的库路径都被忽略
				-T          定义连接脚本
			ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o
		
		(3) 编译bootasm.S生成bootasm.o
		    参数如上
			+ cc boot/bootasm.S
			gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o
		
		(4) 编译boomain.c生成bootmain.o
			+ cc boot/bootmain.c
			gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o
		
		(5) 编译并链接sign.c生成可执行文件bin/sign，用于产生主引导扇区的程序
			+ cc tools/sign.c
			gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o
			gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign
		
		(6) 链接bootasm.o与bootmain.o生成bootblock.o
			+ ld bin/bootblock
			ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
		
		(7) 执行sign，生成主引导扇区bin/bootbloc
			'obj/bootblock.out' size: 496 bytes
			build 512 bytes boot sector: 'bin/bootblock' success!
			dd if=/dev/zero of=bin/ucore.img count=10000
			dd if=bin/bootblock of=bin/ucore.img conv=notrunc
			dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc

	2. 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？
	  	阅读sign.c如下片段：

		  	char buf[512];
		    memset(buf, 0, sizeof(buf));
		    FILE *ifp = fopen(argv[1], "rb");
		    int size = fread(buf, 1, st.st_size, ifp);
		    if (size != st.st_size) {
		        fprintf(stderr, "read '%s' error, size is %d.\n", argv[1], size);
		        return -1;
		    }
		    fclose(ifp);
		    buf[510] = 0x55;
		    buf[511] = 0xAA;
		    FILE *ofp = fopen(argv[2], "wb+");
		    size = fwrite(buf, 1, 512, ofp);
		    if (size != 512) {
		        fprintf(stderr, "write '%s' error, size is %d.\n", argv[2], size);
		        return -1;
		    }
		    fclose(ofp);
		    printf("build 512 bytes boot sector: '%s' success!\n", argv[2]);
	  	
	  	归纳出如下特征：
	  		(1)主引导扇区的大小为512字节。
	  		(2)扇区字节下标510的值为0x55，511的值为0xAA。
	  		(3)主引导程序应不超过510字节，若不足510字节，其余部分以0填补。
	
====================================================================================================================================
【练习2】使用 qemu 执行并调试 lab1 中的软件

  1.从 CPU 加电后执行的第一条指令开始,单步跟踪 BIOS 的执行。
	  首先启动Qemu
	  	qemu -s -S -hda bin/ucore.img -d in_asm -monitor stdio
		在新的窗口中打开gdb，设置与Qemu的连接 
			(gdb)target remote localhost:1234
		设置汇编指令的单步跟踪
		  (gdb) si
		查看代码
			(gdb) monitor x/i $pc
		如此step执行可看到如下结果：
			0x000fe05b:  cmpl   $0x0,%cs:-0x2f2c
			0x000fe062:  jne    0xfc792
			0x000fe066:  xor    %ax,%ax
			0x000fe068:  mov    %ax,%ss
			0x000fe06a:  mov    $0x7000,%esp
			……
			下略
	2.在初始化位置 0x7c00 设置实地址断点,测试断点正常。
		设置断点：
		(gdb) b *0x7c00 
		运行程序：
		(gdb)c
		等待片刻，断点正常，此时Qemu终端显示 Booting from Hard Dist...		
	
	3.从 0x7c00 开始跟踪代码运行,将单步跟踪反汇编得到的代码与 bootasm.S 和 bootblock.asm进行比较。
		在此设置单步执行
		(gdb) si
	  将得到的结果与bootasm.S对照：

		(gdb)
		=> 0x7c01 <start+1>:	cld    
		=> 0x7c02 <start+2>:	xor    %eax,%eax
		=> 0x7c04 <start+4>:	mov    %eax,%ds
		=> 0x7c06 <start+6>:	mov    %eax,%es
		=> 0x7c08 <start+8>:	mov    %eax,%ss
		
		bootasm.S:
		
		    cld                                             # String operations increment
		    xorw %ax, %ax                                   # Segment number zero
		    movw %ax, %ds                                   # -> Data Segment
		    movw %ax, %es                                   # -> Extra Segment
			  movw %ax, %ss                                   # -> Stack Segment
		
		……下略。
	  跟踪发现执行到调用bootmain为止，bootblock与bootasm内容相同，之后的内容为bootmain的内容。
	  这种现象原因是，bootblock为bootasm与boot链接生成。
	 
	4.自己找一个 bootloader 或内核中的代码位置,设置断点并进行测试。
		 选择bootmain.c中的readseg函数入口进行断点测试。
			(gdb) b readseg
			Breakpoint 2 at 0x7c78: file boot/bootmain.c, line 68.
			(gdb) c
			Continuing.
			=> 0x7c78 <readseg>:	push   %ebp
			Breakpoint 2, readseg (va=<unknown type>, count=<unknown type>, offset=<unknown type>) at boot/bootmain.c:68
			68	readseg(uintptr_t va, uint32_t count, uint32_t offset) {
		 于是成功在bootmain的readseg函数中断。
		 
====================================================================================================================================
【练习3】分析 bootloader 进入保护模式的过程。
		阅读 3.2.1 小节“保护模式和分段机制”和 lab1/boot/bootasm.S 源码，试分析如下：
			进入保护模式的过程可大致分为5个阶段。
			(1)	禁止处理器中断，设置字符串从低地址向高地址处理
				cli                                             # Disable interrupts
				cld                                             # String operations increment
			(2)	初始化各个寄存器，重要寄存器置0
				# Set up the important data segment registers (DS, ES, SS).
				xorw %ax, %ax                                   # Segment number zero
				movw %ax, %ds                                   # -> Data Segment
				movw %ax, %es                                   # -> Extra Segment
				movw %ax, %ss                                   # -> Stack Segment
			(3)	激活A20地址线，避免内存绕回
				seta20.1:
					inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
					testb $0x2, %al
					jnz seta20.1
			
					movb $0xd1, %al                                 # 0xd1 -> port 0x64
					outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port
			
				seta20.2:
					inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
					testb $0x2, %al
					jnz seta20.2
			
					movb $0xdf, %al                                 # 0xdf -> port 0x60
					outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
			
					movb $0xdf, %al                                 # 0xdf -> port 0x60, do it again!
					outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
			(4) 从实模式进入保护模式，加载全局描述符gdt表，getdesc指向之
					lgdt gdtdesc
					movl %cr0, %eax
					orl $CR0_PE_ON, %eax
					movl %eax, %cr0
			(5) 跳转到保护模式代码段
					ljmp $PROT_MODE_CSEG, $protcseg
			至此，进入保护模式。
			
====================================================================================================================================
【练习4】分析 bootloader 加载 ELF 格式的 OS 的过程。
   1.bootloader 如何读取硬盘扇区的?
   		读取硬盘区的功能通过readsect函数实现，函数实现如下
			static void readsect(void *dst, uint32_t secno) {
				// 等待硬盘
				waitdisk();
				// 按照磁盘IO地址和对应功能表中的描述操作IO地址 0x1f2-0x1f7
				outb(0x1F2, 1);                         // count = 1
				outb(0x1F3, secno & 0xFF);
				outb(0x1F4, (secno >> 8) & 0xFF);
				outb(0x1F5, (secno >> 16) & 0xFF);
				outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
				outb(0x1F7, 0x20);                      // cmd 0x20 - read sectors
				// 等待硬盘
				waitdisk();
				// 读一个扇区（insl函数在x86.h中定义，直接调用汇编指令实现）
				insl(0x1F0, dst, SECTSIZE / 4);
			}
			
   2.bootloader 是如何加载 ELF 格式的 OS?
			加载 ELF 格式的 OS通过bootmain函数实现，函数实现如下
				void bootmain(void) {
					// 读第一页（8个扇区），即ELF头文件
					readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
					// 通过e_magic域来判断ELF是否正常
					if (ELFHDR->e_magic != ELF_MAGIC) {
						goto bad;
					}
		
					struct proghdr *ph, *eph;
					// 根据phoff域确定起始位置，phnum域确定程序段的数目
					ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
					eph = ph + ELFHDR->e_phnum;
					// 读所有程序段至内存
					for (; ph < eph; ph ++) {
					//这里readseg函数通过readsect函数实现，即一个段包含若干个扇区
						readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
					}
					// 进入e_entry加载各个程序段
					((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
				bad:
					outw(0x8A00, 0x8A00);
					outw(0x8A00, 0x8E00);
					/* do nothing */
					while (1);
				}
				
====================================================================================================================================
【练习5】实现函数调用堆栈跟踪函数

			做到这里感到操统的作业非常友好，不光文档详细，注释和提示写的都异常人性化。
			
			代码详见源程序。
			运行得到结果：
			ebp:0x00007b28 eip:0x0010098e args: 0x00010094 0x00010094 0x00007b58 0x00100094
			    kern/debug/kdebug.c:306: print_stackframe+22
			ebp:0x00007b38 eip:0x00100c75 args: 0x00000000 0x00000000 0x00000000 0x00007ba8
			    kern/debug/kmonitor.c:125: mon_backtrace+10
			ebp:0x00007b58 eip:0x00100094 args: 0x00000000 0x00007b80 0xffff0000 0x00007b84
			    kern/init/init.c:48: grade_backtrace2+33
			ebp:0x00007b78 eip:0x001000bd args: 0x00000000 0xffff0000 0x00007ba4 0x00000029
			    kern/init/init.c:53: grade_backtrace1+38
			ebp:0x00007b98 eip:0x001000db args: 0x00000000 0x00100000 0xffff0000 0x0000001d
			    kern/init/init.c:58: grade_backtrace0+23
			ebp:0x00007bb8 eip:0x00100100 args: 0x001033fc 0x001033e0 0x00001308 0x00000000
			    kern/init/init.c:63: grade_backtrace+34
			ebp:0x00007be8 eip:0x00100057 args: 0x00000000 0x00000000 0x00000000 0x00007c53
			    kern/init/init.c:28: kern_init+86
			ebp:0x00007bf8 eip:0x00007d73 args: 0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8
			    <unknow>: -- 0x00007d72 --
			    

		  可以看到，输出与标准输出基本一致，只有eip和code offset不一样，这是由于print_stackframe函数实现不同导致具体code的位置有不同。
	   
	    最后一行各个数值的含义简要分析：
			(1) ebp:0x00007bf
				kernel从0x7c00开始向上增长，0x7bff后为栈空间
			(2) eip:0x00007d73
				由bootblock.asm知
					7d71:	ff d0                	call   *%eax
				为调用kern_init的指令
				故返回地址为 0x7d71 + 2 = 0x7d73
			(3) args: 0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8
				0x7bf8存放ebp，0x7bc存放eip，args为0x7c00, 0x7c04, 0x7c08, 0x7c0c的值
				这些位置超过了栈底0x7bff，存放的值为bootblock的前几条指令，如下
				start:							
					7c00:	fa                   	cli    				
					7c01:	fc                   	cld    
					7c02:	31 c0                	xor    %eax,%eax				
					7c04:	8e d8                	mov    %eax,%ds				
					7c06:	8e c0                	mov    %eax,%es				
					7c08:	8e d0                	mov    %eax,%ss
				seta20.1:				
					7c0a:	e4 64                	in     $0x64,%al				
					7c0c:	a8 02                	test   $0x2,%al				
					7c0e:	75 fa                	jne    7c0a <seta20.1>
			(4) <unknow>: -- 0x00007d72 --
				调用语句的最后一个位置，即eip-1

====================================================================================================================================

【练习6】完善中断初始化和处理
1. 中断向量表中一个表项占多少字节?其中哪几位代表中断处理代码的入口?
			占8字节。
			前16位和后16位描述中断处理代码的偏移，16-31位描述中断处理代码的段选择符，通过这48位可以决定中断处理代码入口的地址。
			
2. 请编程完善 kern/trap/trap.c 中对中断向量表进行初始化的函数 idt_init。在 idt_init 函数
中,依次对所有中断入口进行初始化。使用 mmu.h 中的 SETGATE 宏,填充 idt 数组内
容。注意除了系统调用中断(T_SYSCALL)以外,其它中断均使用中断门描述符,权限为
内核态权限;而系统调用中断使用异常,权限为陷阱门描述符。每个中断的入口由
tools/vectors.c 生成,使用 trap.c 中声明的 vectors 数组即可。

			void idt_init(void) {
					extern uintptr_t __vectors[];
					int i;
						for (i = 0; i < 256; i++)
							if (i != T_SYSCALL)
								SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
							else
								SETGATE(idt[i], 1, KERNEL_CS, __vectors[i], DPL_USER);
						lidt(&idt_pd);
			}
			这里主要的难点在于找到各个变量的定义。段选择符和权限的定义在memlayout.h中，不同idt项的定义在mmu.h中，参数为idt_pd的指针在x86.h中。

3. 请编程完善 trap.c 中的中断处理函数 trap,在对时钟中断进行处理的部分填写 trap 函数中
处理时钟中断的部分,使操作系统每遇到 100 次时钟中断后,调用 print_ticks 子程序,向
屏幕上打印一行文字”100 ticks”。
			添加模制计数器即可，易。
			测试无误。
